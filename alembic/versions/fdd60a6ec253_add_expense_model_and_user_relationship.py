"""Add expense model and user relationship

Revision ID: fdd60a6ec253
Revises: 0002
Create Date: 2025-10-25 13:45:59.269013

"""

from typing import Sequence, Union

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op  # type: ignore  # pylint: disable=import-error

# revision identifiers, used by Alembic.
revision: str = "fdd60a6ec253"
down_revision: Union[str, Sequence[str], None] = "0002"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "expenses",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("fk_user_id", sa.UUID(), nullable=False),
        sa.Column("title", sa.String(), nullable=False),
        sa.Column("amount", sa.Float(), nullable=False),
        sa.Column("currency", sa.String(length=3), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column(
            "category",
            sa.Enum(
                "LEBENSMITTEL",
                "LIEFERSERVICE",
                "DROGERIEARTIKEL",
                "URLAUB",
                "KLEIDUNG",
                "OTHER",
                name="expensecategory",
            ),
            nullable=False,
        ),
        sa.Column("expensedate", sa.DateTime(timezone=True), nullable=False),
        sa.Column("vendor", sa.String(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=True,
        ),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["fk_user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_expenses_id"), "expenses", ["id"], unique=False)
    op.drop_index(op.f("ix_events_outbox_unpublished"), table_name="events_outbox")
    op.drop_table("events_outbox")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "events_outbox",
        sa.Column(
            "id",
            sa.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("aggregate_type", sa.VARCHAR(length=100), autoincrement=False, nullable=False),
        sa.Column("aggregate_id", sa.VARCHAR(length=100), autoincrement=False, nullable=False),
        sa.Column("event_type", sa.VARCHAR(length=200), autoincrement=False, nullable=False),
        sa.Column("event_version", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "payload", postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False
        ),
        sa.Column("occurred_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("published_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
        sa.Column(
            "attempt_count",
            sa.INTEGER(),
            server_default=sa.text("0"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("last_error", sa.TEXT(), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("events_outbox_pkey")),
    )
    op.create_index(
        op.f("ix_events_outbox_unpublished"), "events_outbox", ["published_at"], unique=False
    )
    op.drop_index(op.f("ix_expenses_id"), table_name="expenses")
    op.drop_table("expenses")
    # ### end Alembic commands ###

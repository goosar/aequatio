services:
  db:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: aequatio
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  app:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8000:8000"
    environment:
      DATABASE_URL: "postgresql+psycopg2://postgres:postgres@db:5432/aequatio"
      RABBITMQ_URL: "amqp://guest:guest@rabbitmq:5672/" # keep for runtime; add rabbitmq service if needed
    volumes:
      # mount project, but override .venv with a named volume to avoid host venv conflicts (Windows)
      - ./:/app
      - venv:/app/.venv
    command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/usr/src/app
      # keep node_modules in a named volume so native binaries are installed inside the container (not on Windows host)
      - frontend_node_modules:/usr/src/app/node_modules
    environment:
      - NODE_ENV=development
    command: ["sh", "-c", "if [ ! -d node_modules ] || [ -z \"$(ls -A node_modules 2>/dev/null)\" ]; then npm ci; fi; npm run dev -- --host 0.0.0.0"]

volumes:
  pgdata:
  # named volume to hold the virtualenv inside the container, prevents mounting Windows .venv/Scripts
  venv:
  frontend_node_modules: